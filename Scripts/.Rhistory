if ((sum(!is.na(compensationmatrix[spillovermarker])) + sum(!is.na(compensationmatrix[,spillovermarker]))) > 2)
{spillovermarkers <- c(spillovermarkers,spillovermarker)}}
if (params$SPILLOVER == "Give Warnings & Compensate Data") {
fcs_compensated <- compensate(x = fcs, spillover = compensationmatrix)
fcs <- fcs_compensated
exprs_compensated <- as.data.frame(fcs_compensated@exprs)
exprs <- exprs_compensated
t(summary(exprs_compensated))
}
}
## Data Pre-Gating
pregating <- function(x, pregate) {
message(paste("Applying Pregate", pregate));
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] < as.numeric(filterargs[2]),]};
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] > as.numeric(filterargs[2]),]};
num_removed <- dim(x)[1] - dim(exprs2)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(exprs2) }
pregates <- strsplit(params$PREGATES, split = " ")[[1]]
for (pregate in pregates) {exprs <- pregating(exprs, pregate)}
## Channel Description
pregating_channels <- c(strsplit(as.character(params$PREGATING_CHANNELS), split = " ")[[1]], "Event #")
pregating_channels <- pregating_channels[pregating_channels %in% colnames(exprs)]
instrument_channels <- strsplit(params$INSTRUMENT_CHANNELS, split = " ")[[1]]
instrument_channels <- instrument_channels[instrument_channels %in% colnames(exprs)]
lineage_channels <- unlist(colnames(exprs))[!unlist(colnames(exprs)) %in% c(pregating_channels,instrument_channels)]
## Combine Metal and Marker names to make it human readable, using information in the parameter data slot
metalmarkers <- list()
markers <- gsub(pattern = ".*_", replacement = "", x = as.vector(fcs@parameters@data$desc));
for (markerid in which(!is.na(markers))) {metalmarkers[[colnames(exprs)[markerid]]] <- markers[markerid]}
## Bead Normalization: Already performed by software before data import
## Compensation:       Already performed by software before data import
## Debarcoding:        Already performed by software before data import
## Arcsinh Data Transformation
message(paste("Arcsinh Data Transformation enabled:",params$ARCSINH)); if (params$ARCSINH) {
require(MASS)
require(RColorBrewer)
k <- 11; my.cols <- rev(brewer.pal(k, "RdYlBu"))
cofac <- params$ARCSINHCOFAC
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
exprs <- cbind(asinh(exprs[,c(pregating_channels, lineage_channels)]/cofac), exprs[,instrument_channels])
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4 (transformed counts)")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
t(summary(exprs))
}
## TODO: Batch Effects ?!?!
umap_clustering <- umap(exprs)
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Set behaviour of functions using randomness to the same version, so results are the same regardless of R version
RNGversion("3.5.3")
if (params$UMAP) {umap_clustering <- umap(exprs)}
if (params$TSNE) {tsne_clustering <- tsne(exprs, perplexity = 10)}
umap_clustering <- umap(exprs)
??umap
?umap
??umap
library(umap)
library(umap)
if (params$UMAP) {try({umap_clustering <- umap(exprs)})}
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Set behaviour of functions using randomness to the same version, so results are the same regardless of R version
RNGversion("3.5.3")
## Load and print used parameters for future reference
load(file = "../temp.RData")
message("Input Files: ", files)
message("Output Directory: ", outputdir)
print(paste("Input Files: ", files))
print(paste("Output Directory: ", outputdir))
print("User Defined Parameters: ")
params
## Unzip Zipped files
#zip_files <- list.files(pattern='.zip$', full=TRUE, ignore.case = TRUE)
#if (!isEmpty(zip_files)) {unzip(zipfile = zip_files)}
#fcs_files <- list.files(pattern='.fcs$', full=TRUE, ignore.case = TRUE)
## Concatenate if needed, load the FCS File and print its summary
if (!concat) {fcs <- read.FCS(filename = files, transformation = FALSE)} else {fcs <- concatFCS(x = files, file_num = TRUE)
write.FCS(fcs, filename = paste(outputdir,".fcs",sep=""))}
exprs <- as.data.frame(fcs@exprs)
## Check is Sample column is present, otherwise stop
if (is.null(exprs$FileNum)) {stop("This Single File was not concatenated using this Script! Please re-concatenate your file using this script.")}
samplenumber <- length(unique(exprs$FileNum))
## Save current data as "uncompensated" in case compensation occurs and comparisons are needed
fcs_uncompensated <- fcs
exprs_uncompensated <- exprs
## Display
fcs@parameters@data
t(summary(exprs))
## Spillover Correction using Spillover Matrix
if (params$SPILLOVER != "Do Nothing") {
#spillovermatrix <- spillover(x = fcs, )
spillovermatrix <- readxl::read_xlsx(path = params$SPILLOVERMATRIX)
spillovermatrix <- tibble::column_to_rownames(spillovermatrix, colnames(spillovermatrix)[1])
compensationmatrix <- spillovermatrix[rownames(spillovermatrix) %in% colnames(fcs@exprs), colnames(spillovermatrix) %in% colnames(fcs@exprs)]
spillovermarkers <- character()
for (spillovermarker in rownames(compensationmatrix)) {
if ((sum(!is.na(compensationmatrix[spillovermarker])) + sum(!is.na(compensationmatrix[,spillovermarker]))) > 2)
{spillovermarkers <- c(spillovermarkers,spillovermarker)}}
if (params$SPILLOVER == "Give Warnings & Compensate Data") {
fcs_compensated <- compensate(x = fcs, spillover = compensationmatrix)
fcs <- fcs_compensated
exprs_compensated <- as.data.frame(fcs_compensated@exprs)
exprs <- exprs_compensated
t(summary(exprs_compensated))
}
}
## Data Pre-Gating
pregating <- function(x, pregate) {
message(paste("Applying Pregate", pregate));
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] < as.numeric(filterargs[2]),]};
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] > as.numeric(filterargs[2]),]};
num_removed <- dim(x)[1] - dim(exprs2)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(exprs2) }
pregates <- strsplit(params$PREGATES, split = " ")[[1]]
for (pregate in pregates) {exprs <- pregating(exprs, pregate)}
## Channel Description
pregating_channels <- c(strsplit(as.character(params$PREGATING_CHANNELS), split = " ")[[1]], "Event #")
pregating_channels <- pregating_channels[pregating_channels %in% colnames(exprs)]
instrument_channels <- strsplit(params$INSTRUMENT_CHANNELS, split = " ")[[1]]
instrument_channels <- instrument_channels[instrument_channels %in% colnames(exprs)]
lineage_channels <- unlist(colnames(exprs))[!unlist(colnames(exprs)) %in% c(pregating_channels,instrument_channels)]
## Combine Metal and Marker names to make it human readable, using information in the parameter data slot
metalmarkers <- list()
markers <- gsub(pattern = ".*_", replacement = "", x = as.vector(fcs@parameters@data$desc));
for (markerid in which(!is.na(markers))) {metalmarkers[[colnames(exprs)[markerid]]] <- markers[markerid]}
## Bead Normalization: Already performed by software before data import
## Compensation:       Already performed by software before data import
## Debarcoding:        Already performed by software before data import
## Arcsinh Data Transformation
message(paste("Arcsinh Data Transformation:",params$ARCSINH)); if (params$ARCSINH) {
require(MASS)
require(RColorBrewer)
k <- 11; my.cols <- rev(brewer.pal(k, "RdYlBu"))
cofac <- params$ARCSINHCOFAC
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
exprs <- cbind(asinh(exprs[,c(pregating_channels, lineage_channels)]/cofac), exprs[,instrument_channels])
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4 (transformed counts)")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
t(summary(exprs))
}
## TODO: Batch Effects ?!?!
if (params$UMAP) {try({umap_clustering <- umap(exprs)})}
RStudio.Version()
## Check if all necessary packages are installed
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Load required Packages
require(rmarkdown); require(knitr); require(shiny); require(yaml)
## Set Pandoc
if (pandoc_available(version = NULL, error = FALSE)) {write_yaml(file = "../PATHS.YML", x= data.frame("PANDOC_INSTALLATION_PATH" = Sys.getenv("RSTUDIO_PANDOC")))
} else {paths <- read_yaml("../PATHS.YML");  Sys.setenv(RSTUDIO_PANDOC = paths$PANDOC_INSTALLATION_PATH)}
## Ask User for .fcs files to be concatenated or for an already concatenated file. Based on these files, generate an output folder.
files <- choose.files()#capticon = "Please select one already concatonated .fsc file or multiple .fcs files to be concatonated.")
if (!all(grepl(pattern = '.fcs$', x = files))) {stop("All selected files must have the \".fsc\" extension!")}
concat <- (length(files)>1)
if (!concat) {
outputdir <- sub(pattern = '.fcs$', x = files, replacement = "")
} else {outputdir <- paste(dirname(files[1]),"/concatenated_",gsub("\\s+","_",gsub(pattern = ":", replacement = "_", x = date())),sep="")
}
dir.create(outputdir)
message(paste("Output folder will be", outputdir))
## Save variables from this script to be loaded again inside the Rmarkdown Report.
if (!(dir.exists("Scripts"))) {setwd("..")}
save.image(file = "temp.RData")
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
install.packages(c('umap','kableExtra'))
install.packages(c("umap", "kableExtra"))
library(umap)
## MANUAL THINGS TO DO BEFORE RUNNING THIS SCRIPT
## -> CHECK Rscript.exe LOCATION IN EXECUTABLES!
## -> SET PANDOC LOCATION BY RUNNING THE LOWEST CODE CHUNK BELOW IN RSTUDIO!
setwd("..")
## Classify Packages
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
PACKAGES_CRAN <- c('clue', 'colorRamps', 'devtools', 'dplyr', 'fastmap', 'gplots', 'igraph', 'installr', 'kableExtra', 'knitr', 'kohonen', 'MASS', 'miscTools', 'pheatmap', 'png', 'Radviz', 'RColorBrewer', 'RcppParallel', 'readr', 'rmarkdown', 'Rtsne', 'scales', 'shiny', 'statmod', 'tibble', 'umap', 'yaml')
PACKAGES_BIOCONDOCTOR <- c('beachmat', 'beeswarm', 'BiocNeighbors', 'BiocSingular', 'CATALYST', 'ConsensusClusterPlus', 'cydar', 'cytofkit', 'DelayedArray', 'DelayedMatrixStats', 'edgeR', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'GenomeInfoDb', 'GenomeInfoDbData', 'ggbeeswarm', 'ggplot', 'ggridges', 'HDF5Array', 'irlba', 'ncdfFlow', 'RcppAnnoy', 'RcppHNSW', 'rhdf5', 'rsvd', 'scater', 'SingleCellExperiment', 'stringr', 'vipor')
PACKAGES_SOURCE <- c('cytofCore', 'cytutils', 'MEM', 'Rphenograph')
## Check if all necessary packages are installed
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
if (length(installation_needed) == 0) {message("\n- All packages are already installed! No installation needed.\n")} else {
message(paste("\n- The following packages are missing:\n", paste(installation_needed, collapse = ", ")))
## Find User Package Library
LibPath <- Sys.getenv("R_LIBS_USER")
if (!(dir.exists(LibPath))) {dir.create(path = Sys.getenv("R_LIBS_USER"), showWarnings = FALSE, recursive = TRUE)}
message(paste("\n- Installing Packages into Personal Library:\n",LibPath))
## Install Packages from local zip file or compile from the cloud
get_os <- function(){
sysinf <- Sys.info()
if (!is.null(sysinf)){
os <- sysinf['sysname']
if (os == 'Darwin')
os <- "osx"
} else { ## mystery machine
os <- .Platform$OS.type
if (grepl("^darwin", R.version$os))
os <- "osx"
if (grepl("linux-gnu", R.version$os))
os <- "linux"
}
tolower(os)
}
if (get_os()[[1]] == "windows") {packagefolder <- "./Packages_ZIP"} else {packagefolder <- "./Packages_TAR_GZ"; setwd(system("pwd", intern = T))}
if (!(dir.exists(packagefolder))) {setwd("..")}
cloud_needed <- 1
if (!(dir.exists(packagefolder))) {message("\n- No directory with Package zip files found. Attempting to install from cloud instead.\n")} else {
## From Zips
message("\n- Directory with Package zip files found, installing from local zips.\n")
setwd(packagefolder)
for (file in list.files()) {if (any(grepl(pattern = strsplit(file,split="[_.]+")[[1]][1], x = installation_needed))) {install.packages(file, repos = NULL, type = "source", lib = LibPath); cloud_needed <- 0}}
## Check if all necessary packages are installed
if (cloud_needed == 1) {message("\n- No packages succesfully installed from Zips, attempting to install from cloud.\nThe following packages are still missing:\n", paste(installation_needed, collapse = ", "))}
setwd("..")
}
## From Internet
if (cloud_needed == 1) {
## From CRAN
chooseCRANmirror(ind = 8)
for (package in installation_needed) {if (package %in% PACKAGES_CRAN) {try({install.packages(pkgs = package, repos='http://cran.us.r-project.org', dependencies = TRUE)})}}
## From Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE)) {install.packages("BiocManager")}
for (package in installation_needed) {if (package %in% PACKAGES_BIOCONDOCTOR) {try({BiocManager::install(package, update = FALSE)})}}
## From Source
require(devtools)
require(flowCore)
if ("cytofCore" %in% installation_needed) {try({install_github("nolanlab/cytofCore", force = TRUE)})}
if ("cytutils" %in% installation_needed) {try({install_github("ismmshimc/cytutils", force = TRUE)})}
if ("Rphenograph" %in% installation_needed) {try({install_github("JinmiaoChenLab/Rphenograph", force = TRUE)})}
if ("MEM" %in% installation_needed) {try({download.file(url = "http://www.nature.com/nmeth/journal/v14/n3/extref/nmeth.4149-S5.zip", destfile = "./MEM.zip"); unzip("MEM.zip"); setwd("./MEM"); build(); install.packages("./", repos = NULL, type="source"); setwd(".."); unlink("../MEM", recursive = TRUE) })}
}
## Check if all necessary packages are installed
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
if(length(installation_needed) > 0) {message(paste("\n- Packages may have been installed this run, but it needs to be checked again if they can be loaded. \n\n- Run this Installation Executable to try and check again, or contact the Author if this keeps happening. \n\n- The following packages are not loaded yet:\n", paste(installation_needed, collapse = ", "), "\n"))
} else {message("\nAll necessary packages installed!!! You're ready to launch the other executables.\n")}
}
## MANUAL THINGS TO DO BEFORE RUNNING THIS SCRIPT
## -> CHECK Rscript.exe LOCATION IN EXECUTABLES!
## -> SET PANDOC LOCATION BY RUNNING THE LOWEST CODE CHUNK BELOW IN RSTUDIO!
setwd("..")
## Classify Packages
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
PACKAGES_CRAN <- c('clue', 'colorRamps', 'devtools', 'dplyr', 'fastmap', 'gplots', 'igraph', 'installr', 'kableExtra', 'knitr', 'kohonen', 'MASS', 'miscTools', 'pheatmap', 'png', 'Radviz', 'RColorBrewer', 'RcppParallel', 'readr', 'rmarkdown', 'Rtsne', 'scales', 'shiny', 'statmod', 'tibble', 'umap', 'yaml')
PACKAGES_BIOCONDOCTOR <- c('beachmat', 'beeswarm', 'BiocNeighbors', 'BiocSingular', 'CATALYST', 'ConsensusClusterPlus', 'cydar', 'cytofkit', 'DelayedArray', 'DelayedMatrixStats', 'edgeR', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'GenomeInfoDb', 'GenomeInfoDbData', 'ggbeeswarm', 'ggplot', 'ggridges', 'HDF5Array', 'irlba', 'ncdfFlow', 'RcppAnnoy', 'RcppHNSW', 'rhdf5', 'rsvd', 'scater', 'SingleCellExperiment', 'stringr', 'vipor')
PACKAGES_SOURCE <- c('cytofCore', 'cytutils', 'MEM', 'Rphenograph')
## Check if all necessary packages are installed
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
if (length(installation_needed) == 0) {message("\n- All packages are already installed! No installation needed.\n")} else {
message(paste("\n- The following packages are missing:\n", paste(installation_needed, collapse = ", ")))
## Find User Package Library
LibPath <- Sys.getenv("R_LIBS_USER")
if (!(dir.exists(LibPath))) {dir.create(path = Sys.getenv("R_LIBS_USER"), showWarnings = FALSE, recursive = TRUE)}
message(paste("\n- Installing Packages into Personal Library:\n",LibPath))
## Install Packages from local zip file or compile from the cloud
get_os <- function(){
sysinf <- Sys.info()
if (!is.null(sysinf)){
os <- sysinf['sysname']
if (os == 'Darwin')
os <- "osx"
} else { ## mystery machine
os <- .Platform$OS.type
if (grepl("^darwin", R.version$os))
os <- "osx"
if (grepl("linux-gnu", R.version$os))
os <- "linux"
}
tolower(os)
}
if (get_os()[[1]] == "windows") {packagefolder <- "./Packages_ZIP"} else {packagefolder <- "./Packages_TAR_GZ"; setwd(system("pwd", intern = T))}
if (!(dir.exists(packagefolder))) {setwd("..")}
cloud_needed <- 1
if (!(dir.exists(packagefolder))) {message("\n- No directory with Package zip files found. Attempting to install from cloud instead.\n")} else {
## From Zips
message("\n- Directory with Package zip files found, installing from local zips.\n")
setwd(packagefolder)
for (file in list.files()) {if (any(grepl(pattern = strsplit(file,split="[_.]+")[[1]][1], x = installation_needed))) {install.packages(file, repos = NULL, type = "source", lib = LibPath); cloud_needed <- 0}}
## Check if all necessary packages are installed
if (cloud_needed == 1) {message("\n- No packages succesfully installed from Zips, attempting to install from cloud.\nThe following packages are still missing:\n", paste(installation_needed, collapse = ", "))}
setwd("..")
}
## From Internet
if (cloud_needed == 1) {
## From CRAN
chooseCRANmirror(ind = 8)
for (package in installation_needed) {if (package %in% PACKAGES_CRAN) {try({install.packages(pkgs = package, repos='http://cran.us.r-project.org', dependencies = TRUE)})}}
## From Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE)) {install.packages("BiocManager")}
for (package in installation_needed) {if (package %in% PACKAGES_BIOCONDOCTOR) {try({BiocManager::install(package, update = FALSE)})}}
## From Source
require(devtools)
require(flowCore)
if ("cytofCore" %in% installation_needed) {try({install_github("nolanlab/cytofCore", force = TRUE)})}
if ("cytutils" %in% installation_needed) {try({install_github("ismmshimc/cytutils", force = TRUE)})}
if ("Rphenograph" %in% installation_needed) {try({install_github("JinmiaoChenLab/Rphenograph", force = TRUE)})}
if ("MEM" %in% installation_needed) {try({download.file(url = "http://www.nature.com/nmeth/journal/v14/n3/extref/nmeth.4149-S5.zip", destfile = "./MEM.zip"); unzip("MEM.zip"); setwd("./MEM"); build(); install.packages("./", repos = NULL, type="source"); setwd(".."); unlink("../MEM", recursive = TRUE) })}
}
## Check if all necessary packages are installed
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
if(length(installation_needed) > 0) {message(paste("\n- Packages may have been installed this run, but it needs to be checked again if they can be loaded. \n\n- Run this Installation Executable to try and check again, or contact the Author if this keeps happening. \n\n- The following packages are not loaded yet:\n", paste(installation_needed, collapse = ", "), "\n"))
} else {message("\nAll necessary packages installed!!! You're ready to launch the other executables.\n")}
}
## Set Pandoc
if (all(unlist(lapply(c("yaml","rmarkdown"), require, character.only = TRUE, quietly = TRUE)))) {
if (pandoc_available(version = NULL, error = FALSE))
{write_yaml(file = "./PATHS.YML", x= data.frame("PANDOC_INSTALLATION_PATH" = Sys.getenv("RSTUDIO_PANDOC")))}
else
{paths <- read_yaml("./PATHS.YML");  Sys.setenv(RSTUDIO_PANDOC = paths$PANDOC_INSTALLATION_PATH)}
}
### Developer only functions (Do not touch!)
## Detach and Delete Nonfunctional Package folders
# setwd(Sys.getenv("R_LIBS_USER"))
# for (package in installation_needed) {
#   try({detach(name = package)}, silent = TRUE)
#   try({dir_delete(list.dirs(recursive = FALSE)[which(grepl(pattern = package, x = list.dirs(recursive = FALSE)))])
#   message(paste("- Uninstalled Installed but Disfunctional Package", package))})
# }
## Find Duplicate package ZIP Files
# setwd(packagefolder)
# for (file in sort(list.files())) {test[[file]] <- strsplit(file, split = "_")[[1]][1]}
# test[which(duplicated(unname(test)))]
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
PACKAGES_CRAN <- c('clue', 'colorRamps', 'devtools', 'dplyr', 'fastmap', 'gplots', 'igraph', 'installr', 'kableExtra', 'knitr', 'kohonen', 'MASS', 'miscTools', 'pheatmap', 'png', 'Radviz', 'RColorBrewer', 'RcppParallel', 'readr', 'rmarkdown', 'Rtsne', 'scales', 'shiny', 'statmod', 'tibble', 'umap', 'yaml')
PACKAGES_BIOCONDOCTOR <- c('beachmat', 'beeswarm', 'BiocNeighbors', 'BiocSingular', 'CATALYST', 'ConsensusClusterPlus', 'cydar', 'cytofkit', 'DelayedArray', 'DelayedMatrixStats', 'edgeR', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'GenomeInfoDb', 'GenomeInfoDbData', 'ggbeeswarm', 'ggplot', 'ggridges', 'HDF5Array', 'irlba', 'ncdfFlow', 'RcppAnnoy', 'RcppHNSW', 'rhdf5', 'rsvd', 'scater', 'SingleCellExperiment', 'stringr', 'vipor')
PACKAGES_SOURCE <- c('cytofCore', 'cytutils', 'MEM', 'Rphenograph')
## Check if all necessary packages are installed
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'dqrng', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'FNN', 'forcats', 'foreach', 'formatR', 'formattable', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RcppProgress', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'RSpectra', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'rvest', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'selectr', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'sitmo', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'uwot', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Set behaviour of functions using randomness to the same version, so results are the same regardless of R version
RNGversion("3.5.3")
## Load and print used parameters for future reference
load(file = "../temp.RData")
message("Input Files: ", files)
message("Output Directory: ", outputdir)
print(paste("Input Files: ", files))
print(paste("Output Directory: ", outputdir))
print("User Defined Parameters: ")
params
## Unzip Zipped files
#zip_files <- list.files(pattern='.zip$', full=TRUE, ignore.case = TRUE)
#if (!isEmpty(zip_files)) {unzip(zipfile = zip_files)}
#fcs_files <- list.files(pattern='.fcs$', full=TRUE, ignore.case = TRUE)
## Concatenate if needed, load the FCS File and print its summary
if (!concat) {fcs <- read.FCS(filename = files, transformation = FALSE)} else {fcs <- concatFCS(x = files, file_num = TRUE)
write.FCS(fcs, filename = paste(outputdir,".fcs",sep=""))}
exprs <- as.data.frame(fcs@exprs)
## Check is Sample column is present, otherwise stop
if (is.null(exprs$FileNum)) {stop("This Single File was not concatenated using this Script! Please re-concatenate your file using this script.")}
samplenumber <- length(unique(exprs$FileNum))
## Save current data as "uncompensated" in case compensation occurs and comparisons are needed
fcs_uncompensated <- fcs
exprs_uncompensated <- exprs
## Display
fcs@parameters@data
t(summary(exprs))
## Spillover Correction using Spillover Matrix
if (params$SPILLOVER != "Do Nothing") {
#spillovermatrix <- spillover(x = fcs, )
spillovermatrix <- readxl::read_xlsx(path = params$SPILLOVERMATRIX)
spillovermatrix <- tibble::column_to_rownames(spillovermatrix, colnames(spillovermatrix)[1])
compensationmatrix <- spillovermatrix[rownames(spillovermatrix) %in% colnames(fcs@exprs), colnames(spillovermatrix) %in% colnames(fcs@exprs)]
spillovermarkers <- character()
for (spillovermarker in rownames(compensationmatrix)) {
if ((sum(!is.na(compensationmatrix[spillovermarker])) + sum(!is.na(compensationmatrix[,spillovermarker]))) > 2)
{spillovermarkers <- c(spillovermarkers,spillovermarker)}}
if (params$SPILLOVER == "Give Warnings & Compensate Data") {
fcs_compensated <- compensate(x = fcs, spillover = compensationmatrix)
fcs <- fcs_compensated
exprs_compensated <- as.data.frame(fcs_compensated@exprs)
exprs <- exprs_compensated
t(summary(exprs_compensated))
}
}
## Data Pre-Gating
pregating <- function(x, pregate) {
message(paste("Applying Pregate", pregate));
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] < as.numeric(filterargs[2]),]};
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; exprs2 <- exprs[exprs[filterargs[1]] > as.numeric(filterargs[2]),]};
num_removed <- dim(x)[1] - dim(exprs2)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(exprs2) }
pregates <- strsplit(params$PREGATES, split = " ")[[1]]
for (pregate in pregates) {exprs <- pregating(exprs, pregate)}
## Channel Description
pregating_channels <- c(strsplit(as.character(params$PREGATING_CHANNELS), split = " ")[[1]], "Event #")
pregating_channels <- pregating_channels[pregating_channels %in% colnames(exprs)]
instrument_channels <- strsplit(params$INSTRUMENT_CHANNELS, split = " ")[[1]]
instrument_channels <- instrument_channels[instrument_channels %in% colnames(exprs)]
lineage_channels <- unlist(colnames(exprs))[!unlist(colnames(exprs)) %in% c(pregating_channels,instrument_channels)]
## Combine Metal and Marker names to make it human readable, using information in the parameter data slot
metalmarkers <- list()
markers <- gsub(pattern = ".*_", replacement = "", x = as.vector(fcs@parameters@data$desc));
for (markerid in which(!is.na(markers))) {metalmarkers[[colnames(exprs)[markerid]]] <- markers[markerid]}
## Bead Normalization: Already performed by software before data import
## Compensation:       Already performed by software before data import
## Debarcoding:        Already performed by software before data import
## Arcsinh Data Transformation
message(paste("Arcsinh Data Transformation:",params$ARCSINH)); if (params$ARCSINH) {
require(MASS)
require(RColorBrewer)
k <- 11; my.cols <- rev(brewer.pal(k, "RdYlBu"))
cofac <- params$ARCSINHCOFAC
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
exprs <- cbind(asinh(exprs[,c(pregating_channels, lineage_channels)]/cofac), exprs[,instrument_channels])
#plot(exprs[,c("CD8", "CD4")], pch=".", col="grey", main="CD8 vs CD4 (transformed counts)")
#z <- kde2d(exprs[,"CD8"], h = length(exprs[,"CD8"]), exprs[,"CD4"], n=50)
#contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE)
t(summary(exprs))
}
## TODO: Batch Effects ?!?!
exprs_subset <- sample(sample_n(exprs, dim(exprs)[1] * params$SUBSAMPLE))
?Rtsne
load("M:/Algemeen/Werkgroepen/Groep-Geel/Cytof/Data for Analysis/Lynn/Whole mouse study - normalized files/normed-v3/Blood/APP6mo/concatenated_Fri_Nov_22_13_06_31_2019/Workspace.RData")
if (params$UMAP) {try({umap_reduction_full <- uwot::umap(X = exprs[,lineage_channels], min_dist = 0.2, n_components = 2, n_neighbors = 100, verbose = TRUE, n_threads = 10, init = "spca")})}
###################################################
### code chunk number 1: style-Sweave
###################################################
BiocStyle::latex()
save(umap_reduction_full, file = "Umap_reduction_Full.RData")
getwd()
plot(umap_reduction_full, pch = 21, cex = 0.5, col="grey", xlab = "", ylab = "", lwd = 0.5, main = "UMAP")
plot(umap_reduction_full, pch = 21, cex = 0.5, col="grey", xlab = "", ylab = "", lwd = 0.5, main = "UMAP")
i <- lineage_channels[10]
i <- lineage_channels[11]
i <- lineage_channels[12]
i <- lineage_channels[13]
i <- lineage_channels[14]
i <- lineage_channels[15]
i <- lineage_channels[20]
i <- lineage_channels[30]
i <- lineage_channels[40]
i <- "Pd110Di"
plotdata <- data.frame("x" = umap_reduction[,1], "y" = umap_reduction[,2], "colour" = unname(exprs_subset[i]))
print(plot_clusters(plotdata))
## Check if all necessary packages are installed by trying to load each
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'dqrng', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'FNN', 'forcats', 'foreach', 'formatR', 'formattable', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RcppProgress', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'RSpectra', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'rvest', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'selectr', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'sitmo', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'uwot', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
## Stop if not all required packages are installed
if(length(installation_needed) > 0) {stop(paste("\n\nNot all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:", paste(installation_needed, collapse = ", ")))}
## Set behaviour of functions using randomness to the same version, so results are the same regardless of R version
RNGversion("3.5.3")
if (params$UMAP) {try({
plot(umap_reduction_full, pch = 21, cex = 0.5, col="grey", xlab = "", ylab = "", lwd = 0.5, main = "UMAP")
#GENES_OF_INTEREST <- c("CD4", "CD8", "CD19", "CD56"); for(i in names(metalmarkers[which(metalmarkers %in% GENES_OF_INTEREST)])) {
for(i in lineage_channels) {
message(i)
plotdata <- data.frame("x" = umap_reduction_full[,1], "y" = umap_reduction_full[,2], "colour" = unname(exprs[i]))
print(plot_clusters(plotdata))
}
})}
if (params$UMAP) {try({
plot(umap_reduction_full, pch = 21, cex = 0.5, col="grey", xlab = "", ylab = "", lwd = 0.5, main = "UMAP")
#GENES_OF_INTEREST <- c("CD4", "CD8", "CD19", "CD56"); for(i in names(metalmarkers[which(metalmarkers %in% GENES_OF_INTEREST)])) {
for(i in lineage_channels) {
message(i)
plotdata <- data.frame("x" = umap_reduction_full[,1], "y" = umap_reduction_full[,2], "colour" = unname(exprs[i]))
print(plot_clusters(plotdata))
}
})}
## Knit the Report! All this needed to be done outside of knitting the report itself in order to be able to move the report to the output folder when finished.
message("\nINSTRUCTIONS: \nYou will now be able to specify parameters for the report in a shiny interface.\nParameters with an asterisk (*) should be correct and should not be touched.")
rmarkdown::render(input = "./Scripts/CyTOF-Titration-Report.Rmd", params = "ask", output_dir = outputdir)
## Check if all necessary packages are installed
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'beachmat', 'beeswarm', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocNeighbors', 'BiocParallel', 'BiocSingular', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'clue', 'colorspace', 'colourpicker', 'colorRamps', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DelayedMatrixStats', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'dqrng', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fastmap', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'FNN', 'forcats', 'foreach', 'formatR', 'formattable', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomeInfoDbData', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggbeeswarm', 'ggplot2', 'ggrepel', 'ggridges', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'HDF5Array', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'installr', 'IRanges', 'irlba', 'iterators', 'jsonlite', 'knitr', 'kableExtra', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pheatmap', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'png', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppAnnoy', 'RcppArmadillo', 'RcppEigen', 'RcppHNSW', 'RcppParallel', 'RcppProgress', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'rhdf5', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'RSpectra', 'rstudioapi', 'rsvd', 'Rtsne', 'RUnit', 'rversions', 'rvest', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scater', 'scatterplot3d', 'selectr', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'SingleCellExperiment', 'sitmo', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'umap', 'usethis', 'utf8', 'uwot', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'vipor', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
?Rphenograph()
