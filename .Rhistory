{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
## Import .fcs data files
setwd("FCS")
## Data Pre-Gating
pregating <- function(x, pregate) {
print(paste("Applying Pregate", pregate))
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; y <- x[x[filterargs[1]] < as.numeric(filterargs[2]),]}
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; y <- x[x[filterargs[1]] > as.numeric(filterargs[2]),]}
num_removed <- dim(x)[1] - dim(y)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(y)}
pregates <- "SSC-A<27000 SSC-A>2 FSC-A<333000 FSC-A>70 FL2-A>0 FL4-A>0"
pregates <- strsplit(pregates, split = " ")[[1]]
biexp <- biexponentialTransform(transformationId="defaultBiexponentialTransform", a = 0.5, b = 1, c = 0.5, d = 1, f = 0, w = 0, tol = .Machine$double.eps^0.25, maxit = as.integer(5000))
fcs_files <- list()
fcs_files_transformed <- list()
exprs <- list()
for (file in list.files()) {try({
message(paste("\nAttempting to import file", file))
sample <- strsplit(file, split = " ")[[1]][1]
fcs_files[[sample]] <- read.FCS(file)
## Transform Data Biexponentially
fcs_files_transformed[[sample]] <- flowCore::transform(fcs_files[[sample]], transformList(tfun = biexp, from = c("FL2-A","FL4-A")))
## Pregate Data
exprs[[sample]] <- as.data.frame(fcs_files_transformed[[sample]]@exprs)
for (pregate in pregates) {exprs[[sample]] <- pregating(exprs[[sample]], pregate)}
## Show Marker Names
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL2-A"] <- "IgG"
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL4-A"] <- "IgA"
})}
View(characteristics_data)
unique(characteristics_data["id","Smoking","Hormonal_contraception"])
unique(characteristics_data[c("id","Smoking","Hormonal_contraception"])
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")
]
)
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
View(unique(characteristics_data[c("id","Smoking","Hormonal_contraception")]))
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])["VH03"]
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])["VH03",]
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])["Id" = VH03]
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])["Id" = "VH03"]
unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])["Id" == "VH03"]
donor_specific <- column_to_rownames(donor_specific, "Id")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "Id")
View(donor_specific)
donor_specific <- column_to_rownames(donor_specific, "id")
View(donor_specific)
donor_specific["VH01"]
donor_specific["VH01",]
donor_specific["VH01",1]
donor_specific["VH01",2]
(donor_specific["VH01",1]
)
donor_specific[patient,1] == 2
NUMBER_OF_TOP_ORGANISMS <- 25
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
theme_set(theme_bw(base_size = 16))
for (patient in unique(annotation_data$donor)) {
## Extra Characteristics
patient_smokes <- donor_specific[patient,1] == 2
patient_contracepts <- donor_specific[patient,2] == 2
if (patient_smokes) {print("<span style='color:red'>Patient Smokes: TRUE </span>")}
else {print("<span style='color:blue'>Patient Smokes: FALSE </span>")}
if (patient_contracepts) {print("<span style='color:red'>Patient Uses Contraception: TRUE </span>")}
else {print("<span style='color:blue'>Patient Uses Contraception: FALSE </span>")}
}
NUMBER_OF_TOP_ORGANISMS <- 25
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
theme_set(theme_bw(base_size = 16))
for (patient in unique(annotation_data$donor)) {
## Extra Characteristics
patient_smokes <- donor_specific[patient,1] == 2
patient_contracepts <- donor_specific[patient,2] == 2
if (patient_smokes) {print("$\color{red}{\text{Patient Smokes: TRUE}}$")}
NUMBER_OF_TOP_ORGANISMS <- 25
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
theme_set(theme_bw(base_size = 16))
for (patient in unique(annotation_data$donor)) {
## Extra Characteristics
patient_smokes <- donor_specific[patient,1] == 2
patient_contracepts <- donor_specific[patient,2] == 2
print(paste("Patient Smokes:", patient_smokes, "\nPatient Uses Contraception:", patient_contracepts))
## Plot IgG / IgA density graph
subset <- dplyr::filter(annotation_data, donor == patient, analysis == "Ig-coating")
plots <- list()
for (swab in sort(subset$sampleID)) try({
dat <- data.frame(x = exprs[[swab]]$IgA, y = exprs[[swab]]$IgG)
dat$density <- get_density(dat$x, dat$y, n = 150)
plots[[swab]] <- ggplot(dat) + geom_point(aes(x, y, color = density), size = 0.5, show.legend = TRUE) + scale_colour_gradientn(colours = colorRamps::matlab.like2(100)) + labs(title = paste("IgG / IgA FACS of Swab", swab), x = "IgA: AF 647-A (Biexp transformed)", y = "IgG: AF 488-A (Biexp transformed)") + theme(text = element_text(size=5), axis.text.x = element_text(size=5, hjust=1), axis.text.y = element_text(size=5, hjust=1))})
## Plot Microbiota heatmap
subset <- microbiome_data[unlist(strsplit(microbiome_data$Sample, split = "_"))[c(TRUE,FALSE)] == patient,]
subset$Sample[duplicated(subset$Sample)] <- paste(subset$Sample[duplicated(subset$Sample)],"_2",sep = "")  ## Failsafe for duplicate swabs
subset <- remove_rownames(subset) %>% column_to_rownames(var = "Sample")
toporganisms <- names(sort(colSums(subset),decreasing = TRUE)[1:NUMBER_OF_TOP_ORGANISMS])
patientheatmap <- setNames(data.frame(matrix(ncol = NUMBER_OF_TOP_ORGANISMS, nrow = length(rownames(subset)))), toporganisms)
rownames(patientheatmap) <- rownames(subset)
for (swab in sort(rownames(subset))) {patientheatmap[swab,] <- subset[swab,toporganisms]}
logpatientheatmap <- log(patientheatmap)
logpatientheatmap[logpatientheatmap == -Inf] <- 0
logpatientheatmap <- logpatientheatmap[order(rownames(logpatientheatmap)),]
pheat <- pheatmap(mat = as.matrix(t(logpatientheatmap)), silent = TRUE, main = paste(patient, "Microbiota Counts (log scale)"),
cluster_rows = F, cluster_cols = F, fontsize = 5)
## Final Plot
try({grid.arrange(grobs = c(plots[1:3], pheat[4]), ncol = 2, nrow = 2)})
}
NUMBER_OF_TOP_ORGANISMS <- 25
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
theme_set(theme_bw(base_size = 16))
for (patient in unique(annotation_data$donor)) {
## Extra Characteristics
patient_smokes <- donor_specific[patient,1] == 2
patient_contracepts <- donor_specific[patient,2] == 2
print(paste("Patient Smokes:", patient_smokes, "--- Patient Uses Contraception:", patient_contracepts))
## Plot IgG / IgA density graph
subset <- dplyr::filter(annotation_data, donor == patient, analysis == "Ig-coating")
plots <- list()
for (swab in sort(subset$sampleID)) try({
dat <- data.frame(x = exprs[[swab]]$IgA, y = exprs[[swab]]$IgG)
dat$density <- get_density(dat$x, dat$y, n = 150)
plots[[swab]] <- ggplot(dat) + geom_point(aes(x, y, color = density), size = 0.5, show.legend = TRUE) + scale_colour_gradientn(colours = colorRamps::matlab.like2(100)) + labs(title = paste("IgG / IgA FACS of Swab", swab), x = "IgA: AF 647-A (Biexp transformed)", y = "IgG: AF 488-A (Biexp transformed)") + theme(text = element_text(size=5), axis.text.x = element_text(size=5, hjust=1), axis.text.y = element_text(size=5, hjust=1))})
## Plot Microbiota heatmap
subset <- microbiome_data[unlist(strsplit(microbiome_data$Sample, split = "_"))[c(TRUE,FALSE)] == patient,]
subset$Sample[duplicated(subset$Sample)] <- paste(subset$Sample[duplicated(subset$Sample)],"_2",sep = "")  ## Failsafe for duplicate swabs
subset <- remove_rownames(subset) %>% column_to_rownames(var = "Sample")
toporganisms <- names(sort(colSums(subset),decreasing = TRUE)[1:NUMBER_OF_TOP_ORGANISMS])
patientheatmap <- setNames(data.frame(matrix(ncol = NUMBER_OF_TOP_ORGANISMS, nrow = length(rownames(subset)))), toporganisms)
rownames(patientheatmap) <- rownames(subset)
for (swab in sort(rownames(subset))) {patientheatmap[swab,] <- subset[swab,toporganisms]}
logpatientheatmap <- log(patientheatmap)
logpatientheatmap[logpatientheatmap == -Inf] <- 0
logpatientheatmap <- logpatientheatmap[order(rownames(logpatientheatmap)),]
pheat <- pheatmap(mat = as.matrix(t(logpatientheatmap)), silent = TRUE, main = paste(patient, "Microbiota Counts (log scale)"),
cluster_rows = F, cluster_cols = F, fontsize = 5)
## Final Plot
try({grid.arrange(grobs = c(plots[1:3], pheat[4]), ncol = 2, nrow = 2)})
}
?cat
cat("### Donor", patient, "Smokes:", patient_smokes, "--- Donor", patient, "Uses Contraception:", patient_contracepts)
cat("### Donor", patient, "\nSmokes:", patient_smokes, "\nDonor", patient, "Uses Contraception:", patient_contracepts)
cat("### Donor", patient, "\nSmokes:", patient_smokes, "\nDonor", patient, "Uses Contraception:", patient_contracepts)
cat("### Donor", patient, "\nSmokes:", patient_smokes, "\nDonor", patient, "Uses Contraception:", patient_contracepts)
cat("### Donor", patient, "\nSmokes:", patient_smokes, "\nUses Contraception:", patient_contracepts)
cat("### Donor", patient, "\n## Smokes:", patient_smokes, "\n## Uses Contraception:", patient_contracepts)
View(characteristics_data)
View(characteristics_data)
cat("### Donor", patient, "\n## Smokes:", patient_smokes, "\n## Uses Contraception:", patient_contracepts)
cat("### Donor", patient, "\n## Smokes:", patient_smokes, "\n## Uses Contraception:", patient_contracepts)
for (file in list.files) {file.rename(from = file, to = sub(x = file, pattern = "Norm_Norm_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "Norm_Norm_", replacement = ""))}
setwd("M:/Algemeen/Werkgroepen/Groep-Geel/Cytof\Data for Analysis/Whole mouse study - normalized files/normed-v3")
setwd("M:/Algemeen/Werkgroepen/Groep-Geel/Cytof/Data for Analysis/Whole mouse study - normalized files/normed-v3")
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "Norm_Norm_", replacement = ""))}
cd CND
setwd("CNS")
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "_20190913_LYOL_Mou_APP_CNS_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "Brcd", replacement = "_Brcd"))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "_concat.exp", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = ".exp", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "_02_0", replacement = ""))}
setwd("../Blood")
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "_20190913_LYOL_Mou_APP_CNS_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190918_LYOL_BLD_APP_Brcd1_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190920_LYOL_BLD_APP_Brcd2_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190920_LYOL_BLD_APP_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190918_LYOL_BLD_APP_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "Norm_Norm_", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190905 Mouse Spleen ", replacement = ""))}
setwd("../Spleen")
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190905 Mouse Spleen ", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "20190906 Mouse Spleen ", replacement = ""))}
for (file in list.files()) {file.rename(from = file, to = sub(x = file, pattern = "..", replacement = "."))}
unique(characteristics_data[c("id","VaginaleSeks","Smoking","Hormonal_contraception")])
View(unique(characteristics_data[c("id","VaginaleSeks","Smoking","Hormonal_contraception")]))
View(unique(characteristics_data[c("id","VaginaleSeks"))
View(unique(characteristics_data[c("id","VaginaleSeks")])
)
group_by(characteristics_data, id, VaginaleSeks)
?group_by
group_by(characteristics_data, id, VaginaleSeks) %>% summarise(n = n())
View(group_by(characteristics_data, id, VaginaleSeks) %>% summarise(n = n()))
vaginal_sex <- characteristics_data[c("id","VaginaleSex")]
vaginal_sex <- characteristics_data[c("id","VaginaleSeks")]
vaginal_sex[vaginal_sex$VaginaleSeks == 0, "VaginaleSeks"] <- NA
View(vaginal_sex)
vaginal_sex[vaginal_sex$VaginaleSeks == 0, "VaginaleSeks"] <- NA
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
View(characteristics_data)
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
View(vaginal_sex)
microbiome_data <- full_join(microbiome_data, vaginal_sex, by = "SampleID")
colnames(vaginal_sex)[1] <- "Sample"
microbiome_data <- full_join(microbiome_data, vaginal_sex, by = "SampleID")
microbiome_data <- full_join(microbiome_data, vaginal_sex, by = "Sample")
View(microbiome_data)
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
for (row in rownames(microbiome_data))
{if (as.numeric(unlist(microbiome_data[row,"swab"])) < 10)
{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
## Functions for Biexponential Transfomration and Data Pre-Gating
biexp <- biexponentialTransform(transformationId="defaultBiexponentialTransform", a = 0.5, b = 1, c = 0.5, d = 1, f = 0, w = 0, tol = .Machine$double.eps^0.25, maxit = as.integer(5000))
pregating <- function(x, pregate) {
print(paste("Applying Pregate", pregate))
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; y <- x[x[filterargs[1]] < as.numeric(filterargs[2]),]}
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; y <- x[x[filterargs[1]] > as.numeric(filterargs[2]),]}
num_removed <- dim(x)[1] - dim(y)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(y)}
PREGATES <- "SSC-A<27000 SSC-A>2 FSC-A<333000 FSC-A>70 FL2-A>0 FL4-A>0"
pregates <- strsplit(PREGATES, split = " ")[[1]]
## Import .fcs data files
setwd("FCS")
fcs_files <- list()
fcs_files_transformed <- list()
exprs <- list()
for (file in list.files()) {try({
message(paste("\nAttempting to import file", file))
sample <- strsplit(file, split = " ")[[1]][1]
fcs_files[[sample]] <- read.FCS(file)
## Transform Data Biexponentially
fcs_files_transformed[[sample]] <- flowCore::transform(fcs_files[[sample]], transformList(tfun = biexp, from = c("FL2-A","FL4-A")))
## Pregate Data
exprs[[sample]] <- as.data.frame(fcs_files_transformed[[sample]]@exprs)
for (pregate in pregates) {exprs[[sample]] <- pregating(exprs[[sample]], pregate)}
## Show Marker Names
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL2-A"] <- "IgG"
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL4-A"] <- "IgA"
})}
View(microbiome_data)
View(microbiome_data["Sample","VaginaleSeks"])
View(microbiome_data[c("Sample","VaginaleSeks")])
View(vaginal_sex)
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
## Import Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
## Import Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
microbiome_data <- microbiome_data[-"Sample"]
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
## Import Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
microbiome_data <- dplyr::select(microbiome_data, -"Sample")
for (row in rownames(microbiome_data))
{if (as.numeric(unlist(microbiome_data[row,"swab"])) < 10)
{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
## Import & Annotate Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
dim(microbiome_data)
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
dim(microbiome_data)
microbiome_data <- dplyr::select(microbiome_data, -"Sample")
dim(microbiome_data)
for (row in rownames(microbiome_data))
{if (as.numeric(unlist(microbiome_data[row,"swab"])) < 10)
{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
microbiome_data[row,"swab"]
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
colnames(vaginal_sex)[1] <- "Sample"
## Import & Annotate Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = FALSE), microbiome_data[,3:length(microbiome_data)])
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
microbiome_data <- dplyr::select(microbiome_data, -"Sample")
for (row in rownames(microbiome_data))
{if (as.numeric(unlist(microbiome_data[row,"swab"])) < 10)
{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
summary(microbiome_data)
t(summary(microbiome_data))
t(summary(microbiome_data))[end]
t(summary(microbiome_data))[last]
t(summary(microbiome_data))[-]
t(summary(microbiome_data))[-1]
t(summary(microbiome_data))
microbiome_data$VaginaleSeks
microbiome_data$"" <- NA
microbiome_data$""
microbiome_data$"" <- NULL
dim(microbiome_data)
microbiome_data$"" <- NA
dim(microbiome_data)
## Import Annotation Data
setwd("O:/m.kok2/PROJECTS/FACS & MICROBIOTA/Analysis all swabs")
annotation_data <- read_delim(file = "20191017_analysis per swab.csv", delim = ";")[1:4]
## Import extra data charasteristics
characteristics_data <- read_delim(file = "20191017_VHdataset_cycle1_condensed.csv", delim = ";")
donor_specific <- unique(characteristics_data[c("id","Smoking","Hormonal_contraception")])
donor_specific <- column_to_rownames(donor_specific, "id")
vaginal_sex <- characteristics_data[c("SampleID","VaginaleSeks")]
vaginal_sex$VaginaleSeks[vaginal_sex$VaginaleSeks == 0] <- NA
vaginal_sex$VaginaleSeks = vaginal_sex$VaginaleSeks * 3
colnames(vaginal_sex)[1] <- "Sample"
## Import & Annotate Microbiome Data
microbiome_data <- read_delim(file = "20190506_R_otu_table_VHrun_month1.csv", delim = ";")
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = FALSE), microbiome_data[,3:length(microbiome_data)])
microbiome_data <- left_join(microbiome_data, vaginal_sex, by = "Sample")
microbiome_data <- dplyr::select(microbiome_data, -"Sample")
for (row in rownames(microbiome_data))
{if (as.numeric(unlist(microbiome_data[row,"swab"])) < 10)
{microbiome_data[row,"swab"] <- as.character(paste("0", microbiome_data[row,"swab"], sep= ""))}}
microbiome_data <- data.frame(tidyr::unite(data = microbiome_data[,c("SampleID","swab")], col = "Sample", sep = "_", remove = TRUE), microbiome_data[,3:length(microbiome_data)])
microbiome_data$"" <- NA
## Functions for Biexponential Transfomration and Data Pre-Gating
biexp <- biexponentialTransform(transformationId="defaultBiexponentialTransform", a = 0.5, b = 1, c = 0.5, d = 1, f = 0, w = 0, tol = .Machine$double.eps^0.25, maxit = as.integer(5000))
pregating <- function(x, pregate) {
print(paste("Applying Pregate", pregate))
if (grepl("<", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = "<")[[1]]; y <- x[x[filterargs[1]] < as.numeric(filterargs[2]),]}
if (grepl(">", pregate, fixed=TRUE)) {filterargs <- strsplit(pregate, split = ">")[[1]]; y <- x[x[filterargs[1]] > as.numeric(filterargs[2]),]}
num_removed <- dim(x)[1] - dim(y)[1]
print(paste("Pregate", pregate, "applied succesfully.", num_removed, "cells have been filtered out."))
return(y)}
PREGATES <- "SSC-A<27000 SSC-A>2 FSC-A<333000 FSC-A>70 FL2-A>0 FL4-A>0"
pregates <- strsplit(PREGATES, split = " ")[[1]]
## Import .fcs data files
setwd("FCS")
fcs_files <- list()
fcs_files_transformed <- list()
exprs <- list()
for (file in list.files()) {try({
message(paste("\nAttempting to import file", file))
sample <- strsplit(file, split = " ")[[1]][1]
fcs_files[[sample]] <- read.FCS(file)
## Transform Data Biexponentially
fcs_files_transformed[[sample]] <- flowCore::transform(fcs_files[[sample]], transformList(tfun = biexp, from = c("FL2-A","FL4-A")))
## Pregate Data
exprs[[sample]] <- as.data.frame(fcs_files_transformed[[sample]]@exprs)
for (pregate in pregates) {exprs[[sample]] <- pregating(exprs[[sample]], pregate)}
## Show Marker Names
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL2-A"] <- "IgG"
colnames(exprs[[sample]])[colnames(exprs[[sample]]) == "FL4-A"] <- "IgA"
})}
NUMBER_OF_TOP_ORGANISMS <- 23
get_density <- function(x, y, ...) {
dens <- MASS::kde2d(x, y, ...)
ix <- findInterval(x, dens$x)
iy <- findInterval(y, dens$y)
ii <- cbind(ix, iy)
return(dens$z[ii])
}
theme_set(theme_bw(base_size = 16))
for (patient in unique(annotation_data$donor)) {
## Extra Characteristics
patient_smokes <- donor_specific[patient,1] == 1
patient_contracepts <- donor_specific[patient,2] == 1
cat("## Donor", patient, "\n# Smokes:", patient_smokes, "\n# Uses Contraception:", patient_contracepts)
## Plot IgG / IgA density graph
subset <- dplyr::filter(annotation_data, donor == patient, analysis == "Ig-coating")
plots <- list()
for (swab in sort(subset$sampleID)) try({
dat <- data.frame(x = exprs[[swab]]$IgA, y = exprs[[swab]]$IgG)
dat$density <- get_density(dat$x, dat$y, n = 150)
plots[[swab]] <- ggplot(dat) + geom_point(aes(x, y, color = density), size = 0.5, show.legend = TRUE) + scale_colour_gradientn(colours = colorRamps::matlab.like2(100)) + labs(title = paste("IgG / IgA FACS of Swab", swab), x = "IgA: AF 647-A (Biexp transformed)", y = "IgG: AF 488-A (Biexp transformed)") + theme(text = element_text(size=5), axis.text.x = element_text(size=5, hjust=1), axis.text.y = element_text(size=5, hjust=1))})
## Plot Microbiota heatmap
subset <- microbiome_data[unlist(strsplit(microbiome_data$Sample, split = "_"))[c(TRUE,FALSE)] == patient,]
subset$Sample[duplicated(subset$Sample)] <- paste(subset$Sample[duplicated(subset$Sample)],"_2",sep = "")  ## Failsafe for duplicate swabs
subset <- remove_rownames(subset) %>% column_to_rownames(var = "Sample")
toporganisms <- list("VaginaleSeks","",names(sort(colSums(subset),decreasing = TRUE)[1:NUMBER_OF_TOP_ORGANISMS]))
patientheatmap <- setNames(data.frame(matrix(ncol = NUMBER_OF_TOP_ORGANISMS, nrow = length(rownames(subset)))), toporganisms)
rownames(patientheatmap) <- rownames(subset)
for (swab in sort(rownames(subset))) {patientheatmap[swab,] <- subset[swab,toporganisms]}
logpatientheatmap <- log(patientheatmap)
logpatientheatmap[logpatientheatmap == -Inf] <- 0
logpatientheatmap <- logpatientheatmap[order(rownames(logpatientheatmap)),]
pheat <- pheatmap(mat = as.matrix(t(logpatientheatmap)), silent = TRUE, main = paste(patient, "Microbiota Counts (log scale)"),
cluster_rows = F, cluster_cols = F, fontsize = 5)
## Final Plot
try({grid.arrange(grobs = c(plots[1:3], pheat[4]), ncol = 2, nrow = 2)})
}
toporganisms
unlist(toporganisms)
packages_to_check <- c("yaml","scales", "RColorBrewer", "MASS", "Rtsne", "kohonen", "miscTools", "gplots", "Radviz", "igraph", "statmod","dplyr","readr","tibble", "flowCore", "cytofkit", "ConsensusClusterPlus", "cydar", "flowCL", "CATALYST", "ncdfFlow", "edgeR", "FlowSOM", "flowDensity", "devtools", "cytofCore", "cytutils", "Rphenograph", "MEM")
installation_needed <- (packages_to_check %in% installed.packages())
installation_needed <- packages_to_check[installation_needed == FALSE]
if(length(installation_needed) > 0) {stop(paste("Not all necessary packages are installed! Run the Installation Executable or contact the author. The following packages are missing:",installation_needed))}
installation_needed
PACKAGES_TOTAL <- c('abind', 'askpass', 'assertthat', 'backports', 'base64enc', 'BH', 'Biobase', 'BiocGenerics', 'BiocInstaller', 'BiocParallel', 'bitops', 'brew', 'callr', 'car', 'carData', 'CATALYST', 'caTools', 'cellranger', 'circlize', 'cli', 'clipr', 'clisymbols', 'colorspace', 'colourpicker', 'commonmark', 'ComplexHeatmap', 'ConsensusClusterPlus', 'corpcor', 'covr', 'crayon', 'crosstalk', 'curl', 'cydar', 'cytofCore', 'cytofkit', 'cytolib', 'cytutils', 'data.table', 'DelayedArray', 'DEoptimR', 'desc', 'destiny', 'devtools', 'digest', 'doParallel', 'dotCall64', 'dplyr', 'drc', 'DT', 'e1071', 'edgeR', 'ellipsis', 'evaluate', 'fansi', 'fields', 'flowCL', 'flowCore', 'flowDensity', 'FlowSOM', 'flowUtils', 'flowViz', 'flowWorkspace', 'forcats', 'foreach', 'formatR', 'fs', 'futile.logger', 'futile.options', 'gdata', 'GenomeInfoDb', 'GenomicRanges', 'GEOmap', 'GetoptLong', 'ggplot2', 'ggrepel', 'ggthemes', 'gh', 'git2r', 'GlobalOptions', 'glue', 'gplots', 'graph', 'gridBase', 'gridExtra', 'gtable', 'gtools', 'haven', 'hexbin', 'highr', 'hms', 'htmltools', 'htmlwidgets', 'httpuv', 'httr', 'IDPmisc', 'igraph', 'ini', 'IRanges', 'iterators', 'jsonlite', 'knitr', 'kohonen', 'labeling', 'laeken', 'lambda.r', 'later', 'latticeExtra', 'lazyeval', 'lifecycle', 'limma', 'lme4', 'lmtest', 'locfit', 'magrittr', 'maps', 'maptools', 'markdown', 'MASS', 'MatrixModels', 'matrixStats', 'MBA', 'MEM', 'memoise', 'mime', 'miniUI', 'minqa', 'miscTools', 'multcomp', 'munsell', 'mvtnorm', 'ncdfFlow', 'nloptr', 'nnls', 'openssl', 'openxlsx', 'pbkrtest', 'pcaPP', 'pdist', 'permute', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'plotly', 'plotrix', 'plyr', 'praise', 'prettyunits', 'processx', 'progress', 'promises', 'proxy', 'ps', 'purrr', 'quantreg', 'R6', 'Radviz', 'ranger', 'RANN', 'RBGL', 'rcmdcheck', 'RColorBrewer', 'Rcpp', 'RcppArmadillo', 'RcppEigen', 'RCurl', 'readr', 'readxl', 'rematch', 'remotes', 'reshape2', 'rex', 'RFOC', 'rgeos', 'Rgraphviz', 'Rhdf5lib', 'rio', 'rjson', 'rlang', 'rmarkdown', 'robustbase', 'roxygen2', 'Rphenograph', 'RPMG', 'rprojroot', 'RProtoBufLib', 'rrcov', 'RSEIS', 'rstudioapi', 'Rtsne', 'RUnit', 'rversions', 'Rwave', 'S4Vectors', 'sandwich', 'scales', 'scatterplot3d', 'sessioninfo', 'shape', 'shiny', 'shinyBS', 'shinydashboard', 'shinyFiles', 'shinyjs', 'smoother', 'snow', 'sourcetools', 'sp', 'spam', 'SPARQL', 'SparseM', 'splancs', 'statmod', 'stringi', 'stringr', 'SummarizedExperiment', 'sys', 'testthat', 'TH.data', 'tibble', 'tidyr', 'tidyselect', 'tinytex', 'tsne', 'TTR', 'usethis', 'utf8', 'vcd', 'vctrs', 'vegan', 'VGAM', 'VIM', 'viridis', 'viridisLite', 'whisker', 'withr', 'xfun', 'XML', 'xml2', 'xopen', 'xtable', 'xts', 'XVector', 'yaml', 'zeallot', 'zip', 'zlibbioc', 'zoo')
installation_needed <- unlist(lapply(PACKAGES_TOTAL, require, character.only = TRUE, quietly = TRUE))
installation_needed <- PACKAGES_TOTAL[installation_needed == FALSE]
if (length(installation_needed) == 0) {message("\nAll packages are already installed! No installation needed.\n")} else {
message(paste("\nThe following packages are missing:\n", paste(installation_needed, collapse = ", ")))
}
## Determine User Package Library
LibPath <- Sys.getenv("R_LIBS_USER")
message(paste("\nInstalling Packages into Personal Library:\n",LibPath))
## Install Packages from local zip file or compile from the cloud
get_os <- function(){
sysinf <- Sys.info()
if (!is.null(sysinf)){
os <- sysinf['sysname']
if (os == 'Darwin')
os <- "osx"
} else { ## mystery machine
os <- .Platform$OS.type
if (grepl("^darwin", R.version$os))
os <- "osx"
if (grepl("linux-gnu", R.version$os))
os <- "linux"
}
tolower(os)
}
if (get_os()[[1]] == "windows") {packagefolder <- "./Packages_ZIP"} else {packagefolder <- "./Packages_TAR_GZ"; setwd(system("pwd", intern = T))}
if (!(dir.exists(packagefolder))) {setwd("..")}
if (!(dir.exists(packagefolder))) {message("\nNo directory with Package zip files found. Installing from cloud instead.\n")} else {
## From Zips
message("\nDirectory with Package zip files found, installing from local zips.\n")
setwd(packagefolder)
for (file in list.files()) {if (any(grepl(pattern = strsplit(file,split="[_.]+")[[1]][1], x = installation_needed))) {install.packages(file, repos = NULL, type = "source", lib =LibPath)}}
setwd("..")
## Check if all necessary packages are installed
installation_still_needed <- unlist(lapply(installation_needed, require, character.only = TRUE, quietly = TRUE))
installation_needed <- installation_needed[installation_still_needed == FALSE]
if (length(installation_needed) == 0) {message("\nAll necessary packages installed!!! You're ready to launch the other executables.\n")}
else {message("\nNot all packages succesfully instealled from Zips, attempting to install from cloud as well.\n")}
}
install.packages("png")
install.packages("RcppParallel")
install.packages("clue")
